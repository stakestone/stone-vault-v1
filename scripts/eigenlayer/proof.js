const web3 = require("web3");
// Connect to an Ethereum node
const web = new web3.Web3('https://goerli.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161');

// Your Ethereum account private key
const privateKey = 'ad71217e310fbd0fdfd7fb627788cc770710140d6ea8d32b9360f6f2babac136';

// Ethereum account address
const accountAddress = '0x693385E040a9b038f6e87bc49a34D5645EAf66e5';
const txData = "0x3f65cf190000000000000000000000000000000000000000000000000000000065d9b8d400000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000007c020baa9954403537b362b3469dfdc6ada62de1ead119b4d1ce89d8ab951b3c3fe000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000609a6726940e463995cff3427c7385f2a3f881fe70b994045d79d83f49771fad9dac5869a2c1ee06a3c499d1a3f2adf30927f49418ecf6d72b1a6af65b4b58135168d49f1555e7cdf9698d466d246905babf17ffda5887c15174caace6aa684fc6000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000af1920000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000005c0b4da6b3c8d49afbd4b3f0a7313a36c086e84657cc0a2e676fd5c5f10f67ecd8016e066ff3d36e251d057cbab294b6e1173a60ecd843b8f881f6fc88dd822ff90394d342ea422f939c2a219eba651ca18c9753a88f076f0a8e51fd7baaa182fa8c78009fdf07fc56a11f122370658a353aaa542ed63e44c4bc15ff4cd105ab33c6d4f1ede9aaf890d052f6a19cfc9fd6089c4529eec63cd039e8b707b0892bf5b9efde052aa15429fae05bad4d0b1d7c64da64d03d7a1854a588c2cb8430c0d30d88ddfeed400a8755596b21942c1497e114c302e6118290f91e6772976041fa13e5a8b86e0b7c762905b7e634138420a105d6d0c25017cd5ba5faa891377261afbda77a4c586fb45feb093a01737f1fcac46f19f38bc1a45bf052ef01c3552d7506d86582d252405b840018792cad2bf1259f1ef5aa5f887e13cb2f0094f51e1ffff0ad7e659772f9534c195c815efc4014ef1e1daed4404c06385d11192e92b6cf04127db05441cd833107a52be852868890e4317e6a02ab47683aa75964220934d9747ce95d592d392619f2d3e0762729b505ec78952856c044a14f65248c7993fd34a4d16990b864552e56996ad2ceb35715bc7bd5dd2786ef469b99a50a0dfaa7dd270070bdc41c6e6714c32b1a29977a2d2fa080a5cd05e56d6d511fe4d7af8712ff17d0b7227a7c7e0351dc42fded2d3711506dc3ed95a751ec7efceef8fe6b1689256c0d385f42f5bbe2027a22c1996e110ba97c171d3e5948de92bebf55a44f2c0ac18de86e1d6cdc35d12a487a4530772558bd8be3f749df8f5518f95eec8b2e541cad4e91de38385f2e046619f54496c2382cb6cacd5b98c26f5a4bfc88e12f28b1af36c19b3782246ae23c301588ffd8bfdbb0a40099109c86122cddba7b592e3133393c16194fac7431abf2f5485ed711db282183c819e08ebaa8a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9cfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167e71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d731206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc021352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a467657cdd2986268250628d0c10e385c58c6191e6fbe05191bcc04f133f2cea72c1c4848930bd7ba8cac54661072113fb278869e07bb8587f91392933374d017bcbe18869ff2c22b28cc10510d9853292803328be4fb0e80495e8bb8d271f5b889636b5fe28e79f1b850f8658246ce9b6a1e7b49fc06db7143e8fe0b4f2b0c5523a5c985e929f70af28d0bdd1a90a808f977f597c7c778c489e98d3bd8910d31ac0f7c6f67e02e6e4e1bdefb994c6098953f34636ba2b6ca20a4721d2b26a886722ff1c9a7e5ff1cf48b4ad1582d3f4e4a1004f3b20d8c5a2b71387a4254ad933ebc52f075ae229646b6f6aed19a5e372cf295081401eb893ff599b3f9acc0c0d3e7d328921deb59612076801e8cd61592107b5c67c79b846595cc6320c395b46362cbfb909fdb236ad2411b4e4883810a074b840464689986c3f8a8091827e17c32755d8fb3687ba3ba49f342c77f5a1f89bec83d811446e1a467139213d640b6a74f7210d4f8e7e1039790e7bf4efa207555a10a6db1dd4b95da313aaa88b88fe76ad21b516cbc645ffe34ab5de1c8aef8cd4e7f8d2b51e8e1456adc7563cda206f95f10a0000000000000000000000000000000000000000000000000000000000b7fe070000000000000000000000000000000000000000000000000000000000be9125f5183bb97dd7c767f493d3cc1d3f1bc86c7ada3b1aa0f59bb10fc3f352454b6be62c16d6c79cd39291716095e9a66102480e51f5b3d5e8d643e795b019f66a513bb9696a03c94744d4e2b5510f53fc960e932d2f06b09e44f611d07f5cfd9ca380c077f4fd1ddd5e41d70b0fcd7be3d9501a208358a5518d27c17146b1000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000008bdfe17f2aa8258cd37aad777b94390fb82e7cacb63702e2ff1a3d99ddf27a81e0100000000000000000000007f6a925a67c315b48d3f1e76989c6203a4e0bae8004059730700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006faa03000000000000000000000000000000000000000000000000000000000079aa030000000000000000000000000000000000000000000000000000000000ffffffffffffffff000000000000000000000000000000000000000000000000ffffffffffffffff000000000000000000000000000000000000000000000000";
const eigenPodAddr = "0x7F6a925A67c315b48d3f1e76989C6203a4E0baE8";
const podOwner = "0x32a0c4F9a074DC641E0b0F4E24BBF128a4892D05";

async function sendTransaction() {
  try {
    // Create the transaction object
    const transactionObject = {
      from: accountAddress,
      to: eigenPodAddr,
      data: txData,
      gas: 6700000,
      gasPrice: 10000000000
    };
    // Sign the transaction
    const signedTransaction = await web.eth.accounts.signTransaction(transactionObject, privateKey, { from: podOwner });

    // Send the signed transaction
    const verifyTx = await web.eth.sendSignedTransaction(signedTransaction.rawTransaction, { from: podOwner });

    console.log("verifyTx: ", verifyTx);
  } catch (error) {
    console.error('Error sending transaction:', error);
  }
}

// Call the async function
sendTransaction();